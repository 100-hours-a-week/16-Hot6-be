name: Backend CI & Dev/Prod CD

on:
  push:
    branches:
      - dev
      - main
      - feat/cd-properties

jobs:
  build:
    name: Build Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: build/libs/*.jar

  deploy:
    name: Deploy to Dev/Prod via SSH
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      DEPLOY_ENV: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
      SECRET_LABELS: ${{ github.ref_name == 'main' && 'backend_shared backend_prod' || 'backend_shared backend_dev' }}

    steps:
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: .

      - name: Find and rename JAR
        run: |
          JAR_FILE=$(find . -name "*.jar" | head -n 1)
          cp "$JAR_FILE" backend.jar

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Generate secrets.properties file
        run: |
          mkdir -p ./secrets
          touch ./secrets/secrets.properties

          for LABEL in $SECRET_LABELS; do
            gcloud secrets list --filter="labels.env=$LABEL" --format="value(name)" | while read SECRET_NAME; do
              SECRET_VALUE=$(gcloud secrets versions access latest --secret="$SECRET_NAME")
              IFS='-' read -r SERVICE KEY ENV <<< "$SECRET_NAME"
              echo "${KEY}=${SECRET_VALUE}" >> ./secrets/secrets.properties
            done
          done
        
      - name: Set up SSH config for jump server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.JUMP_SSH_KEY }}" > ~/.ssh/jump_key
          chmod 600 ~/.ssh/jump_key

          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/dev_key
          chmod 600 ~/.ssh/dev_key

          cat <<EOF > ~/.ssh/config
          Host backend-server
              HostName ${{ secrets.SSH_HOST }}
              User ubuntu
              IdentityFile ~/.ssh/dev_key
              ProxyJump jump-server
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null

          Host jump-server
              HostName ${{ secrets.JUMP_SSH_HOST }}
              User ubuntu
              IdentityFile ~/.ssh/jump_key
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF

      - name: Upload backend.jar and secrets.properties to server
        run: |
          ssh -F ~/.ssh/config backend-server 'mkdir -p ~/backend'
          scp -F ~/.ssh/config backend.jar backend-server:/home/ubuntu/backend/backend.jar
          scp -F ~/.ssh/config ./secrets/secrets.properties backend-server:/home/ubuntu/backend/secrets.properties

      - name: Restart backend via SSH
        run: |
          ssh -F ~/.ssh/config backend-server "DEPLOY_ENV=${{ env.DEPLOY_ENV }} bash -s" <<'EOF'
            set -eux
            cd ~/backend

            echo "▶️ [1] 실행 중인 애플리케이션 중지"
            PID=$(pgrep -f backend || true)

            if [ -n "$PID" ]; then
              echo "기존 프로세스 종료중 (PID: $PID)"
              kill "$PID"
              sleep 5
            else
              echo "실행 중인 프로세스 없음"
            fi

            mkdir -p /var/log/onthetop/backend

            echo "▶️ 애플리케이션 재시작"
            nohup env SPRING_PROFILES_ACTIVE=${{ env.DEPLOY_ENV }} \
              java -jar backend.jar \
              --spring.config.additional-location=file:/home/ubuntu/backend/secrets.properties \
              > /var/log/onthetop/backend/backend.log 2>&1 &

            echo "▶️ [3] 실행 상태 확인"
            sleep 10
            NEW_PID=$(pgrep -f backend || true)

            if [ -n "$NEW_PID" ]; then
              echo "✅ 정상 기동 완료 (PID: $NEW_PID)"
            else
              echo "❗ 기동 실패"
              exit 1
            fi
          EOF
