name: Backend CI & Dev/Prod CD

on:
  push:
    branches:
      - dev

jobs:
  build:
    name: Build Backend and Docker image
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      DEPLOY_ENV: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: build/libs/*.jar

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PAT }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build & Push Docker image (dev)
        if: ${{ env.DEPLOY_ENV == 'dev' }}
        run: |
          docker build -t luckyprice1103/onthetop-backend-dev:${{ github.sha }} .
          docker push luckyprice1103/onthetop-backend-dev:${{ github.sha }}

      - name: Build & Push Docker image (prod)
        if: ${{ env.DEPLOY_ENV == 'prod' }}
        run: |
          docker build -t luckyprice1103/onthetop-backend:${{ github.sha }} .
          docker push luckyprice1103/onthetop-backend:${{ github.sha }}

  deploy:
    name: Deploy to Dev/Prod via SSH
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    env:
      DEPLOY_ENV: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
      SECRET_LABELS: ${{ github.ref_name == 'main' && 'backend_shared backend_prod' || 'backend_shared backend_dev' }}

    steps:
        
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Generate secrets.properties file
        run: |
          mkdir -p ./secrets
          touch ./secrets/secrets.properties

          for LABEL in $SECRET_LABELS; do
            gcloud secrets list --filter="labels.env=$LABEL" --format="value(name)" | while read SECRET_NAME; do
              SECRET_VALUE=$(gcloud secrets versions access latest --secret="$SECRET_NAME")
              IFS='-' read -r SERVICE KEY ENV <<< "$SECRET_NAME"
              echo "${KEY}=${SECRET_VALUE}" >> ./secrets/secrets.properties
            done
          done
        
      - name: Set up SSH config for jump server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.JUMP_SSH_KEY }}" > ~/.ssh/jump_key
          chmod 600 ~/.ssh/jump_key

          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/dev_key
          chmod 600 ~/.ssh/dev_key

          cat <<EOF > ~/.ssh/config
          Host backend-server
              HostName ${{ secrets.SSH_HOST }}
              User ubuntu
              IdentityFile ~/.ssh/dev_key
              ProxyJump jump-server
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null

          Host jump-server
              HostName ${{ secrets.JUMP_SSH_HOST }}
              User ubuntu
              IdentityFile ~/.ssh/jump_key
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF

      - name: Upload backend.jar and secrets.properties to server
        run: |
          ssh -F ~/.ssh/config backend-server 'mkdir -p ~/backend'
          scp -F ~/.ssh/config ./secrets/secrets.properties backend-server:/home/ubuntu/backend/secrets.properties
 
      - name: Run dev container on server
        run: |
          ssh -F ~/.ssh/config backend-server <<'EOF'
            echo "도커 테스트 컨테이너 실행 중 (port 8080)"

            if ! command -v lsof >/dev/null 2>&1; then
            echo " lsof이 설치되어 있지 않아 설치 중..."
            sudo apt update && sudo apt install -y lsof
            fi

            echo " 기존 8080 포트 사용 중인 프로세스 종료"
            PID=$(sudo lsof -t -i:8080 || true)
            if [ -n "$PID" ]; then
                echo "포트를 점유 중인 프로세스 종료 (PID: $PID)"
                kill "$PID"
                sleep 3
            else
                echo "포트를 점유한 프로세스 없음"
            fi

            # 기존 테스트 컨테이너 있으면 제거
            docker rm -f backend-${{ env.DEPLOY_ENV }} || true
            docker pull luckyprice1103/backend:${{ env.DEPLOY_ENV }}

            mkdir -p /var/log/onthetop/backend

            # 도커 실행
            docker run -d \
              --name backend-${{ env.DEPLOY_ENV }} \
              -p 8080:8080 \
              --memory=512m \
              --cpus=0.5 \
              -v /home/ubuntu/backend/secrets.properties:/app/secrets.properties \
              -v /var/log/onthetop/backend:/logs \
              -e SPRING_PROFILES_ACTIVE=${{ env.DEPLOY_ENV }} \
              luckyprice1103/backend:${{ env.DEPLOY_ENV }} \
              --logging.file.path=/logs/backend.log \
              --spring.config.additional-location=file:/app/secrets.properties

            echo " 테스트 컨테이너가 8080 포트에서 실행 중입니다."
          EOF
